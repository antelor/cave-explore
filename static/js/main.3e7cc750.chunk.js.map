{"version":3,"sources":["components/envVars.js","components/Map.js","App.js","index.js"],"names":["envVars","Map","props","className","map","row","keyRow","tile","index","playerY","playerX","App","handleMovement","event","newState","state","keyCode","mapArray","mapCreate","setState","newMap","i","newRow","j","newTile","Math","floor","random","console","log","push","turns","conway","checkNeighbors","tileX","tileY","neighborCount","y","x","neighbors","document","addEventListener","this","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3e7cc750.chunk.js","sourcesContent":["export const envVars = {\n    WIDTH: 50,\n    HEIGHT: 16,\n    alivePerc: 45\n}","import React from 'react'\nimport './Map.css'\n\nfunction Map( props ) {\n    return (\n        <div className='Map'>\n            {props.map.map((row, keyRow) => {\n                return row.map( (tile, index) => { \n                    if (keyRow === props.playerY && index === props.playerX) {\n                        return (<div key={index + '-' + keyRow} className=\"tile player\"> @ </div>)\n                    }\n                    else return (<div key={index + '-' + keyRow} className=\"tile\">{tile}</div>)              \n                })\n            }\n            )}\n        </div>\n    )\n}\n\nexport default Map\n","import React, { Component } from 'react'\nimport { envVars } from './components/envVars'\nimport Map from './components/Map'\nimport './App.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playerX: 2,\n      playerY: 2,\n      mapArray:\n        [ [] ]\n    };\n\n  }\n\n  handleMovement = (event) => {\n    let newState = this.state;\n    let playerX = this.state.playerX;\n    let playerY = this.state.playerY;\n    \n    switch (event.keyCode) {\n      //left\n      case 37:\n        //si se puede caminar y no esta contra un borde, moverse\n        if (newState.playerX % envVars.WIDTH !== 0 && this.state.mapArray[playerY][playerX - 1] !== '#') newState.playerX--;\n        //si esta contra un borde, recrear mapa\n        else if (newState.playerX === 0) {\n          this.mapCreate();\n          newState.playerX = envVars.WIDTH - 1;\n        }\n        break;\n      \n      //up\n      case 38:\n        //si se puede caminar y no esta contra un borde, moverse\n        if( newState.playerY % envVars.HEIGHT !== 0  && this.state.mapArray[playerY-1][playerX]!=='#') newState.playerY--;\n        //si esta contra un borde, recrear mapa\n        else if (newState.playerY === 0) {\n          this.mapCreate();\n          newState.playerY = envVars.HEIGHT - 1;\n        }\n        break;\n      \n      //right\n      case 39:\n        //si se puede caminar y no esta contra un borde, moverse\n        if( (newState.playerX + 1) % envVars.WIDTH !== 0  && this.state.mapArray[playerY][playerX+1] !== '#' ) newState.playerX++;\n        //si esta contra un borde, recrear mapa\n        else if (newState.playerX === envVars.WIDTH-1) {\n          this.mapCreate();\n          newState.playerX = 0;\n        }\n        break;\n      \n      //down\n      case 40:\n        //si se puede caminar y no esta contra un borde, moverse\n        if( (newState.playerY + 1) % envVars.HEIGHT!== 0  && this.state.mapArray[playerY+1][playerX]!=='#' ) newState.playerY++;\n        //si esta contra un borde, recrear mapa\n        else if (newState.playerY === envVars.HEIGHT-1) {\n          this.mapCreate();\n          newState.playerY = 0;\n        }\n        break;\n      \n      default:\n        break;\n    }\n\n    this.setState(newState);\n  }\n\n  //map handler\n  mapCreate = () => {\n    let newMap = [];\n    //populate with random values\n    for (let i = 0; i < envVars.HEIGHT; i++){\n      let newRow = [];\n      for (let j = 0; j < envVars.WIDTH; j++){\n        let newTile = Math.floor(Math.random() * 100);\n        console.log(newTile);\n        if (newTile <= envVars.alivePerc) newTile = '#';\n        if (newTile > envVars.alivePerc) newTile = '.';\n  \n        newRow.push(newTile);\n      }\n      newMap.push(newRow);\n    }\n    \n    //conway\n    for (let turns = 0; turns < 10; turns++){\n      let conwayMap = this.conway(newMap);\n      newMap = conwayMap;\n    }\n    \n    //set new map in state\n    let newState = this.state;\n    newState.mapArray = newMap;\n\n    //making whichever tile the player is on a floor tile\n    newState.mapArray[this.state.playerY][this.state.playerX] = '.';\n\n    //update state\n    this.setState(newState);\n  }\n\n  //contador de vecinos para conway\n  checkNeighbors = (map, tileX, tileY) => {\n    //indice actual = tileX + tileY * WIDTH\n\n    let neighborCount = 0;\n    /*\n    1 2 3\n    4 @ 5\n    6 7 8\n    */\n    \n    //4 & 5\n    //left edge check\n    if (tileX > 0) {\n      if (map[tileY][tileX - 1] === '#') {\n        neighborCount++;\n        //console.log('4');\n      }\n    }\n    //right edge check\n    if ( tileX !== envVars.WIDTH-1) {\n      if (map[tileY][tileX + 1] === '#') {\n        neighborCount++;\n        //console.log('5');\n      }\n    }\n\n    //2 & 7\n    //top edge check\n    if (tileY > 0) {\n      if (map[tileY - 1][tileX] === '#') {\n        neighborCount++;\n        //console.log('2');\n      }\n    }\n    //bottom edge check\n    if (tileY !== envVars.HEIGHT - 1) {\n      if (map[tileY + 1][tileX] === '#') {\n        neighborCount++;\n        //console.log('7');\n      }\n    }\n\n    //1 & 3\n    if (tileY > 0 && tileX > 0) {\n      if (map[tileY - 1][tileX - 1] === '#') {\n        neighborCount++;\n        //console.log('1');\n      }\n    }\n    if (tileY > 0 && tileX !== envVars.WIDTH-1) {\n      if (map[tileY - 1][tileX + 1] === '#') {\n        neighborCount++;\n        //console.log('3');\n      }\n    }\n\n    //6 & 8\n    if (tileY !== envVars.HEIGHT - 1 && tileX > 0) {\n      if (map[tileY + 1][tileX - 1] === '#') {\n        neighborCount++;\n        //console.log('6');\n      }\n    }\n    if (tileY < envVars.HEIGHT-1 && tileX !== envVars.WIDTH-1) {\n      if (map[tileY + 1][tileX + 1] === '#') {\n        neighborCount++;\n        //console.log('8');\n      }\n    }\n    \n    return neighborCount;\n  }\n\n  conway = (map) => {\n    let newMap = [];\n\n    for (let y = 0; y < envVars.HEIGHT; y++) {\n      let newRow = [];\n\n      for (let x = 0; x < envVars.WIDTH; x++){\n        //console.log(y + \"y \"+[x] + \"x:\");\n        let neighbors = this.checkNeighbors(map, x, y);\n        //let neighbors = 0;\n        \n        //B678/S345678 is the cellular automaton rule where a cell is born if it has 6,7,8 living neighbors,\n        //and it survives if it has either 3 4 5 6 7 or 8 living neighbors, and dies otherwise\n\n        //Any live cell with 3 4 5 6 7 or 8 live neighbours survives.\n        if (map[y][x] === '#') {\n          if (neighbors >=3 && neighbors <= 8) newRow.push('#');\n          //All other live cells die in the next generation.\n          else newRow.push('.');\n        }\n\n        //Any dead cell with 6,7,8 live neighbours becomes a live cell.\n        if (map[y][x] === '.') {\n          if (neighbors >=6 && neighbors <=8) newRow.push('#');\n          //Similarly, all other dead cells stay dead.\n          else newRow.push('.');          \n        }\n      }\n      newMap.push(newRow);\n    }\n    return newMap;\n  }\n\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleMovement);\n    this.mapCreate();\n  }\n\n  render() {\n    return(\n      <div className=\"App\">\n        <Map map={this.state.mapArray} playerX={this.state.playerX} playerY={this.state.playerY} />\n      </div>\n    )\n  \n  }\n      \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)"],"sourceRoot":""}